import argparse

def coe2raw(file_name: str) -> list:
    with open(file_name, "r") as f:
        lines = f.readlines()
    
    lines = lines[2:]
    lines = list(map(lambda line: line.strip().strip(",").strip(";"), lines))
    return lines


def write_to_file(f, lines, size):
    f.writelines(lines)
    cnt = len(lines)
    if cnt < size:
        for _ in range(size - cnt):
            f.write("00000000")


def uart_text_gen(text, data, size: int = 16384, new_file: str = "uart_output.txt"):
    '''
    :param: text: path to text file
    :param: data: path to data file
    :param: size: maximum allowed size for each segment (text or data)
    :param: new_file: path to output
    '''
    text_lines = coe2raw(text)
    data_lines = coe2raw(data)

    with open(new_file, "w") as f:
        f.write("03020000")
        write_to_file(f, text_lines, size)
        write_to_file(f, data_lines, size)

    print(f'Text:\t"{text}"')
    print(f'Data:\t"{data}"')
    print(f'Dst:\t"{new_file}"')
    print(f'Transformed {size * 2} lines.')


if __name__ == "__main__":
    argParser = argparse.ArgumentParser()
    argParser.add_argument(
        "-t", "--text", help="path to text coe to be parsed. The file must be generated by rawhex2coe.py", type=str)
    argParser.add_argument(
        "-d", "--data", help="path to data coe to be parsed. The file must be generated by rawhex2coe.py", type=str)
    argParser.add_argument(
        "-o", "--output", help="path to target file. A new file will be created if non-exist.", type=str, default="output.txt")
    argParser.add_argument(
        "-s", "--size", help="size of each segment in words (32 bit). Default to 16384.", type=int, default=16384)
    cmd_args = argParser.parse_args()
    
    uart_text_gen(cmd_args.text, cmd_args.data, cmd_args.size, cmd_args.output)